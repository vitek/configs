#!/usr/bin/env python3

import argparse
import sys
import collections


def parse_columns(value):
    return tuple(int(col) for col in value.split(','))


def map_columns(fields, cols):
    key = []
    for i in cols:
        if i < len(fields):
            key.append(fields[i])
        else:
            key.append(None)
    return ','.join(str(i) for i in key)


def main():
    parser = argparse.ArgumentParser(
        description='Run command when input device is added',
    )
    parser.add_argument(
        '-F', '--field-separator',
        default='\t',
        help='Field separator, default is tab',
    )
    parser.add_argument(
        '-k', '--key',
        type=parse_columns,
        help='Key columns',
    )
    parser.add_argument(
        '-g', '--group',
        type=parse_columns,
        help='Columns to group by',
    )
    args = parser.parse_args()

    group_metrics = collections.defaultdict(collections.Counter)
    group = 'default'
    for line in sys.stdin:
        line = line.rstrip('\r\n')
        parts = line.split(args.field_separator)
        if args.key:
            key = map_columns(parts, args.key)
        else:
            key = line
        if args.group:
            group = map_columns(parts, args.group)
        group_metrics[group][key] += 1

    align = max(
        max(len(key) for key in metrics.keys())
        for metrics in group_metrics.values())
    for group, metrics in group_metrics.items():
        total = sum(metrics.values())
        print(f'{group}: {total}')
        for k, v in metrics.most_common():
            print(f'... {k:<{align}} {100 * v/total:5.02f}% ({v})')


if __name__ == '__main__':
    main()
