#!/usr/bin/env python

import argparse
import asyncio
import re

from i3ipc.aio import Connection
import i3ipc.events

DEFAULT_LAYOUT = 0
BLACKLIST = [
    # emacs
    {
        'app_id': re.compile(r'^emacs.*'),
    },
]

def is_blacklisted(window):
    for rule in BLACKLIST:
        for key, pattern in rule.items():
            value = getattr(window, key)
            if pattern.match(value):
                return True
    return False


async def i3_layout_set(i3, layout):
    await i3.command(f'input "*" xkb_switch_layout {layout}')


async def i3_layout_default(i3):
    await i3_layout_set(i3, 0)


async def i3_layout_next(i3):
    await i3_layout_set(i3, 'next')


async def i3_layout_main(i3, args):
    tree = await i3.get_tree()
    focused = tree.find_focused()
    if focused:
        if is_blacklisted(focused):
            await i3_layout_default(i3)
        else:
            await i3_layout_next(i3)


async def i3_layout_daemon_main(i3, args):
    class context:
        current_layout = -1
        last_window = -1
        window_layout = {}

    async def get_desired_layout(window):
        desired = context.window_layout.get(window.id, DEFAULT_LAYOUT)
        if desired != 0 and is_blacklisted(window):
            desired = 0
        return desired

    async def layout_update(i3, window):
        layout = await get_desired_layout(window)
        if layout != context.window_layout:
            await i3_layout_set(i3, layout)

    async def on_input_event(i3, event):
        if event.change == 'xkb_layout':
            tree = await i3.get_tree()
            focused = tree.find_focused()
            context.current_layout = event.input.xkb_active_layout_index
            if focused:
                context.window_layout[focused.id] = context.current_layout
                await layout_update(i3, focused)

    async def on_window_focus(i3, event):
        window_id = event.container.id
        context.last_window = window_id
        tree = await i3.get_tree()
        window = tree.find_by_id(window_id)
        if window:
            await layout_update(i3, window)

    async def on_window_close(i3, event):
        window_id = event.container.id
        context.window_layout.pop(window_id, None)
        context.last_window = -1

    i3.on(i3ipc.events.Event.INPUT, on_input_event)
    i3.on(i3ipc.events.Event.WINDOW_FOCUS, on_window_focus)
    i3.on(i3ipc.events.Event.WINDOW_CLOSE, on_window_close)
    await i3.main()


async def amain(args):
    i3 = await Connection(auto_reconnect=True).connect()
    await args.handler(i3, args)


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(metavar='command')
    parser.set_defaults(handler=i3_layout_main)

    command_parser = subparsers.add_parser(
        'daemon',
        description='Per-window layout daemon',
    )
    command_parser.set_defaults(handler=i3_layout_daemon_main)

    command_parser = subparsers.add_parser(
        'next',
        description='Cycle i3 layout (default)',
    )
    command_parser.set_defaults(handler=i3_layout_main)
    args = parser.parse_args()

    asyncio.get_event_loop().run_until_complete(amain(args))


if __name__ == '__main__':
    main()
