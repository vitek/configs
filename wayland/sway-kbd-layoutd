#!/usr/bin/env python

import argparse
import re

import i3ipc
import i3ipc.events

DEFAULT_LAYOUT = 0
BLACKLIST = [
    # emacs
    {
        'app_id': re.compile(r'^emacs.*'),
    },
]

def is_blacklisted(window):
    for rule in BLACKLIST:
        for key, pattern in rule.items():
            value = getattr(window, key)
            if pattern.match(value):
                return True
    return False


def sway_layout_set(sway, layout):
    sway.command(f'input "*" xkb_switch_layout {layout}')


def sway_layout_default(sway):
    sway_layout_set(sway, 0)


def sway_layout_next(sway):
    sway_layout_set(sway, 'next')


def sway_layout_main(sway, args):
    tree = sway.get_tree()
    focused = tree.find_focused()
    if focused:
        if is_blacklisted(focused):
            sway_layout_default(sway)
        else:
            sway_layout_next(sway)


def sway_layout_daemon_main(sway, args):
    class context:
        current_layout = -1
        last_window = -1
        window_layout = {}

    def get_desired_layout(window):
        desired = context.window_layout.get(window.id, DEFAULT_LAYOUT)
        if desired != 0 and is_blacklisted(window):
            desired = 0
        return desired

    def layout_update(sway, window):
        layout = get_desired_layout(window)
        if layout != context.window_layout:
            sway_layout_set(sway, layout)

    def on_input_event(sway, event):
        if event.change == 'xkb_layout':
            tree = sway.get_tree()
            focused = tree.find_focused()
            context.current_layout = event.input.xkb_active_layout_index
            if focused:
                context.window_layout[focused.id] = context.current_layout
                layout_update(sway, focused)

    def on_window_focus(sway, event):
        window_id = event.container.id
        context.last_window = window_id
        tree = sway.get_tree()
        window = tree.find_by_id(window_id)
        if window:
            layout_update(sway, window)

    def on_window_close(sway, event):
        window_id = event.container.id
        context.window_layout.pop(window_id, None)
        context.last_window = -1

    sway.on(i3ipc.events.Event.INPUT, on_input_event)
    sway.on(i3ipc.events.Event.WINDOW_FOCUS, on_window_focus)
    sway.on(i3ipc.events.Event.WINDOW_CLOSE, on_window_close)
    sway.main()


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(metavar='command')
    parser.set_defaults(handler=sway_layout_main)

    command_parser = subparsers.add_parser(
        'daemon',
        description='Per-window layout daemon',
    )
    command_parser.set_defaults(handler=sway_layout_daemon_main)

    command_parser = subparsers.add_parser(
        'next',
        description='Cycle sway layout (default)',
    )
    command_parser.set_defaults(handler=sway_layout_main)

    args = parser.parse_args()
    sway = i3ipc.Connection()
    args.handler(sway, args)


if __name__ == '__main__':
    main()
